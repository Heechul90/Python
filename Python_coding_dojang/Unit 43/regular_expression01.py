### Unit 43. 정규표현식 사용하기
## 정규표현식(regular expression)은 일정한 규칙(패턴)을 가진 문자열을 표현하는 방법

## 43.1 문자열 판단하기
## 정규표현식은 re 모듈을 가져와서 사용하며
## match 함수에 정규표현식 패턴과 판단할 문자열을 넣습니다(re는 regular expression의 약자).

# re.match('패턴', '문자열')
import re
re.match('Hello', 'Hello, world!')     # 문자열이 있으므로 정규표현식 매치 객체가 반환됨
re.match('Python', 'Hello, world!')    # 문자열이 없으므로 아무것도 반환되지 않음


## 43.1.1  문자열이 맨 앞에 오는지 맨 뒤에 오는지 판단하기
## 문자열 앞에 ^를 붙이면 문자열이 맨 앞에 오는지 판단하고,
## 문자열 뒤에 $를 붙이면 문자열이 맨 뒤에 오는지 판단합니다(특정 문자열로 끝나는지).

# ^문자열
# 문자열$

# 단, 이때는 match 대신 search 함수를 사용해야 합니다.
# match 함수는 문자열 처음부터 매칭되는지 판단하지만,
# search는 문자열 일부분이 매칭되는지 판단합니다.

re.search('^Hello', 'Hello, world!')     # Hello로 시작하므로 패턴에 매칭됨
re.search('world!$', 'Hello, world!')    # world!로 끝나므로 패턴에 매칭됨



## 43.1.2  지정된 문자열이 하나라도 포함되는지 판단하기
## |는 특정 문자열에서 지정된 문자열(문자)이 하나라도 포함되는지 판단합니다.
## 기본 개념은 OR 연산자와 같습니다.

# 문자열|문자열
# 문자열|문자열|문자열|문자열

re.match('hello|world', 'hello')    # hello 또는 world가 있으므로 패턴에 매칭됨