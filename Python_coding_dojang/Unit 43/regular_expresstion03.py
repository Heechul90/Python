### Unit 43. 정규표현식 사용하기
## 43.3 그룹 사용하기

## 정규표현식 그룹은 해당 그룹과 일치하는 문자열을 얻어올 때 사용합니다.
## 패턴 안에서 정규표현식을 ( )(괄호)로 묶으면 그룹이 됩니다.

# (정규표현식) (정규표현식)


## 다음은 공백으로 구분된 숫자를 두 그룹으로 나누어서 찾은 뒤
## 각 그룹에 해당하는 문자열(숫자)을 가져옵니다.

# 매치객체.group(그룹숫자)
import re

m = re.match('([0-9]+) ([0-9]+)', '10 295')
m.group(1)    # 첫 번째 그룹(그룹 1)에 매칭된 문자열을 반환
m.group(2)    # 두 번째 그룹(그룹 2)에 매칭된 문자열을 반환
m.group()     # 매칭된 문자열을 한꺼번에 반환
m.group(0)    # 매칭된 문자열을 한꺼번에 반환


## 그리고 groups 메서드는 각 그룹에 해당하는 문자열을 튜플로 반환합니다.

# 매치객체.groups()

m.groups()    # 각 그룹에 해당하는 문자열을 튜플 형태로 반환


## 그룹 개수가 많아지면 숫자로 그룹을 구분하기가 힘들어집니다.
## 이때는 그룹에 이름을 지으면 편리합니다.
## 그룹의 이름은 ( )(괄호) 안에 ?P<이름> 형식으로 지정합니다.

# (?P<이름>정규표현식)

# 매치객체.group('그룹이름')

m = re.match('(?P<func>[a-zA-Z_][a-zA-Z0-9_]+)\((?P<arg>\w+)\)', 'print(1234)')
m.group('func')    # 그룹 이름으로 매칭된 문자열 출력
m.group('arg')     # 그룹 이름으로 매칭된 문자열 출력


## 43.3.1  패턴에 매칭되는 모든 문자열 가져오기
## 그러면 그룹 지정 없이 패턴에 매칭되는 모든 문자열을 가져오려면 어떻게 해야 할까요?
## 이때는 findall 함수를 사용하며 매칭된 문자열을 리스트로 반환합니다.

# re.findall('패턴', '문자열')

re.findall('[0-9]+', '1 2 Fizz 4 Buzz Fizz 7 8')

# 참고 | *, +와 그룹 활용하기
# 정규표현식에서 +과 *을 조합하여 사용할 때는 그룹으로 묶어서 사용합니다.
# (.[a-z]+)*는 점과 영문 소문자가 1개 이상 있는지 판단하고,
# 이것 자체가 0개 이상인지 판단합니다.
# 즉, 규칙은 반드시 지켜야 하지만 있어도 되고 없어도 되는 상황에 사용합니다.

re.match('[a-z]+(.[a-z]+)*$', 'hello.world')    # .world는 문자열이므로 패턴에 매칭됨
re.match('[a-z]+(.[a-z]+)*$', 'hello.1234')     # .1234는 숫자이므로 패턴에 매칭되지 않음
re.match('[a-z]+(.[a-z]+)*$', 'hello')          # .뒤에 문자열이 없어도 패턴에 매칭됨