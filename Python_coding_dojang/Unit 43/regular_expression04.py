### Unit 43. 정규표현식 사용하기
## 43.4 문자열 바꾸기

## 문자열을 바꿀 때는 sub 함수를 사용하며
## 패턴, 바꿀 문자열, 문자열, 바꿀 횟수를 넣어줍니다.
## 여기서 바꿀 횟수를 넣으면 지정된 횟수만큼 바꾸며 바꿀 횟수를 생략하면
## 찾은 문자열을 모두 바꿉니다.

# re.sub('패턴', '바꿀문자열', '문자열', 바꿀횟수)

import re

re.sub('apple|orange', 'fruit', 'apple box orange tree')  # apple 또는 orange를 fruit로 바꿈
re.sub('[0-9]+', 'n', '1 2 Fizz 4 Buzz Fizz 7 8')         # 숫자만 찾아서 n으로 바꿈


## sub 함수는 바꿀 문자열 대신 교체 함수를 지정할 수도 있습니다.
## 교체 함수는 매개변수로 매치 객체를 받으며 바꿀 결과를 문자열로 반환하면 됩니다.
## 다음은 문자열에서 숫자를 찾은 뒤 숫자를 10배로 만듭니다.

# 교체함수(매치객체)
# re.sub('패턴', 교체함수, '문자열', 바꿀횟수)

def multiple10(m):        # 매개변수로 매치 객체를 받음
    n = int(m.group())    # 매칭된 문자열을 가져와서 정수로 변환
    return str(n * 10)    # 숫자에 10을 곱한 뒤 문자열로 변환해서 반환

re.sub('[0-9]+', multiple10, '1 2 Fizz 4 Buzz Fizz 7 8')

re.sub('[0-9]+', lambda m: str(int(m.group()) * 10), '1 2 Fizz 4 Buzz Fizz 7 8')


## 43.4.1  찾은 문자열을 결과에 다시 사용하기
## 정규표현식으로 찾은 문자열을 가져와서 결과에 다시 사용해보겠습니다.
## 먼저 정규표현식을 그룹으로 묶습니다.
## 그러고 나면 바꿀 문자열에서 \\숫자 형식으로 매칭된 문자열을 가져와서 사용할 수 있습니다.

# \\숫자

re.sub('([a-z]+) ([0-9]+)', '\\2 \\1 \\2 \\1', 'hello 1234')    # 그룹 2, 1, 2, 1 순으로 바꿈

## 이번에는 조금 더 응용해보겠습니다.
## 다음은 '{ "name": "james" }'을 '<name>james</name>' 형식으로 바꿉니다.

re.sub('({\s*)"(\w+)":\s*"(\w+)"(\s*})', '<\\2>\\3</\\2>', '{ "name": "james" }')

## 만약 그룹에 이름을 지었다면 \\g<이름> 형식으로 매칭된 문자열을 가져올 수 있습니다
## (\\g<숫자> 형식으로 숫자를 지정해도 됩니다).

# \\g<이름>
# \\g<숫자>

re.sub('({\s*)"(?P<key>\w+)":\s*"(?P<value>\w+)"(\s*})', '<\\g<key>>\\g<value></\\g<key>>', '{ "name": "james" }')

# 참고 | raw 문자열 사용하기
# 정규표현식의 특수 문자를 판단하려면 \를 붙여야 합니다.
# 여기서 문자열 앞에 r을 붙여주면
# 원시(raw) 문자열이 되어 \를 붙이지 않아도 특수 문자를 그대로 판단할 수 있습니다.
# 따라서 raw 문자열에서는
# \\숫자, \\g<이름>, \\g<숫자>는 \숫자, \g<이름>, \g<숫자> 형식처럼
# \를 하나만 붙여서 사용할 수 있습니다.

# r'\숫자 \g<이름> \g<숫자>'
re.sub('({\s*)"(\w+)":\s*"(\w+)"(\s*})', r'<\2>\3</\2>', '{ "name": "james" }')